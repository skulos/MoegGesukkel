// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package moeggesukkel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoegGeSukkelClient is the client API for MoegGeSukkel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoegGeSukkelClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (MoegGeSukkel_UploadClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (MoegGeSukkel_DownloadClient, error)
}

type moegGeSukkelClient struct {
	cc grpc.ClientConnInterface
}

func NewMoegGeSukkelClient(cc grpc.ClientConnInterface) MoegGeSukkelClient {
	return &moegGeSukkelClient{cc}
}

func (c *moegGeSukkelClient) Upload(ctx context.Context, opts ...grpc.CallOption) (MoegGeSukkel_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &MoegGeSukkel_ServiceDesc.Streams[0], "/moeg.MoegGeSukkel/upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &moegGeSukkelUploadClient{stream}
	return x, nil
}

type MoegGeSukkel_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type moegGeSukkelUploadClient struct {
	grpc.ClientStream
}

func (x *moegGeSukkelUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *moegGeSukkelUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moegGeSukkelClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (MoegGeSukkel_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &MoegGeSukkel_ServiceDesc.Streams[1], "/moeg.MoegGeSukkel/download", opts...)
	if err != nil {
		return nil, err
	}
	x := &moegGeSukkelDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MoegGeSukkel_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type moegGeSukkelDownloadClient struct {
	grpc.ClientStream
}

func (x *moegGeSukkelDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MoegGeSukkelServer is the server API for MoegGeSukkel service.
// All implementations must embed UnimplementedMoegGeSukkelServer
// for forward compatibility
type MoegGeSukkelServer interface {
	Upload(MoegGeSukkel_UploadServer) error
	Download(*DownloadRequest, MoegGeSukkel_DownloadServer) error
	mustEmbedUnimplementedMoegGeSukkelServer()
}

// UnimplementedMoegGeSukkelServer must be embedded to have forward compatible implementations.
type UnimplementedMoegGeSukkelServer struct {
}

func (UnimplementedMoegGeSukkelServer) Upload(MoegGeSukkel_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedMoegGeSukkelServer) Download(*DownloadRequest, MoegGeSukkel_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedMoegGeSukkelServer) mustEmbedUnimplementedMoegGeSukkelServer() {}

// UnsafeMoegGeSukkelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoegGeSukkelServer will
// result in compilation errors.
type UnsafeMoegGeSukkelServer interface {
	mustEmbedUnimplementedMoegGeSukkelServer()
}

func RegisterMoegGeSukkelServer(s grpc.ServiceRegistrar, srv MoegGeSukkelServer) {
	s.RegisterService(&MoegGeSukkel_ServiceDesc, srv)
}

func _MoegGeSukkel_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MoegGeSukkelServer).Upload(&moegGeSukkelUploadServer{stream})
}

type MoegGeSukkel_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type moegGeSukkelUploadServer struct {
	grpc.ServerStream
}

func (x *moegGeSukkelUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *moegGeSukkelUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MoegGeSukkel_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MoegGeSukkelServer).Download(m, &moegGeSukkelDownloadServer{stream})
}

type MoegGeSukkel_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type moegGeSukkelDownloadServer struct {
	grpc.ServerStream
}

func (x *moegGeSukkelDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MoegGeSukkel_ServiceDesc is the grpc.ServiceDesc for MoegGeSukkel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoegGeSukkel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moeg.MoegGeSukkel",
	HandlerType: (*MoegGeSukkelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "upload",
			Handler:       _MoegGeSukkel_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "download",
			Handler:       _MoegGeSukkel_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "moeggesukkel.proto",
}
